//Useful general mixin

// # Mixins for cross browser compatible transitions #######################
// Parameters: value of the transition
@mixin transition($transition...){
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}

@mixin transition-property($property...) {
  -moz-transition-property:    $property;
  -o-transition-property:      $property;
  -webkit-transition-property: $property;
  transition-property:         $property;
}

@mixin transition-duration($duration...) {
  -moz-transition-property:    $duration;
  -o-transition-property:      $duration;
  -webkit-transition-property: $duration;
  transition-property:         $duration;
}

@mixin transition-timing-function($timing...) {
  -moz-transition-timing-function:    $timing;
  -o-transition-timing-function:      $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function:         $timing;
}

@mixin transition-delay($delay...) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}

// # Mixin for cross browser compatible animations ########################
// Parameters: name of the animation, type of animation and duration, all in a variable
@mixin animation($animation){
  -webkit-animation:  $animation;
  -moz-animation:     $animation;
  -ms-animation:      $animation;
  -o-animation:       $animation;
  animation:          $animation;
}

// # Mixin for cross browser opacity #####################################
// Parameters: opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

//Mixin for cross browser 3D transforms
@mixin transform($transform) {
  -webkit-transform: $transform;
  -moz-transform: $transform;
  transform: $transform;
}
@mixin aux_slide($enter, $leave) {
  [data-ui-view].ng-enter {
    @include transform(translateX($enter));
  }

  [data-ui-view].ng-enter-active {
    @include transform(translateX(0));
  }

  [data-ui-view].ng-leave {
    @include transform(translateX(0));
  }

  [data-ui-view].ng-leave-active {
    @include transform(translateX($leave));
  }
}
@mixin slide($direction) {
  background-color: blue;
  [data-ui-view].ng-enter, [data-ui-view].ng-leave {
    position: absolute;
    left: 0;
    right: 0;
    @include transition(all .75s cubic-bezier(0.4, 0.0, 0.2, 1));
  }
  @if $direction == right {
      background-color: red;
      $enter: 100%;
      $leave: -100%;
      @include aux_slide($enter, $leave);
  }
  @if $direction == left {
      background-color: green;
      $enter: -100%;
      $leave: 100%;
      @include aux_slide($enter, $leave);
  }

}
.slideLeft{
  @include slide(left);
}
.slideRight{
  @include slide(right);
}
.layout-fill {
  margin: 0;
  width: 100%;
  min-height: 100%;
  height: 100%;
}

// # Mixin for scroll without scroll bar
@mixin scroll-no-scroll-bar{
  height: 100%;
  overflow-y: scroll;
  overflow-x: hidden;
  &::-webkit-scrollbar {
    width: 0 !important
  }
  -ms-overflow-style: none;
  overflow: -moz-scrollbars-none;
}

// # Mixin to make something unselectable
@mixin unselectable {
  user-select: none;
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -o-user-select: none;
}

// # Flexbox mixins with browser compatibility
@mixin layout-column {
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

@mixin layout-row {
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

@mixin layout-align-stretch {
  -webkit-align-items: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  -webkit-align-content: stretch;
  -ms-flex-line-pack: stretch;
  align-content: stretch;
}

@mixin layout-align-center {
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  max-width: 100%;
  justify-content: center;
}

@mixin layout-align-start {
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
}

@mixin layout-align-end {
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
}

@mixin layout-align-space-between {
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

@mixin layout-align-space-around {
  -webkit-justify-content: space-around;
  -ms-flex-pack: justify;
  justify-content: space-around;
}

//# APP ########################################################
//# Mixin for responsive adaptation
//## PARAMETERS: phone, tablet, jumbo
@mixin doResponsive($device) {
  @if $device == phone {
    @media only screen and (max-width: 450px) { @content }
  }
  @if $device == tablet {
    @media only screen and (max-width: 960px) { @content }
  }
  @if $device == jumbo {
    @media only screen and (min-width: 1920px) { @content }
  }
}

//# Mixin for apply contour to text
//# PARAMETERS: $border, $blur, $color
@mixin applyTextContour($border, $blur, $color) {
  $negative-border: -$border;
  @content;
  text-shadow:
          $negative-border $negative-border $blur $color,
          $border $border $blur $color,
          $negative-border $border $blur $color,
          $border $negative-border $blur $color;
}

//# MATERIAL DESIGN LITE #######################################
//# Mixin for change MDL checkboxes color
//## PARAMETERS: login
@mixin mdlCheckBoxSetColor($section) {
  @if $section == login {
    $color: rgb(189, 189, 189);
    .mdl-checkbox { @content }
    .mdl-checkbox__box-outline { border-color: $color; }
    .mdl-checkbox.is-checked .mdl-checkbox__tick-outline { background-color: $color; }
  }
}

//# Mixin for apply content in MDL floating labels use states
//## PARAMETERS: void
@mixin mdlFloatingLabelsUseStates {
  .mdl-textfield--floating-label.is-focused,
  .mdl-textfield--floating-label.is-dirty,
  .mdl-textfield--floating-label.has-placeholder {
    .mdl-textfield__label { @content }
  }
}
